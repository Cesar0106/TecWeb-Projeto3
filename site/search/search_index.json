{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"P\u00e1gina inicial Bem vindo(a) a p\u00e1gina inicial do tutorial de Flutter para iniciantes! Autores: Cesar Ezra Ades Guilherme Caproni de Faria Jonathan Sutton Link do reposit\u00f3rio","title":"Home"},{"location":"#pagina-inicial","text":"Bem vindo(a) a p\u00e1gina inicial do tutorial de Flutter para iniciantes!","title":"P\u00e1gina inicial"},{"location":"#autores","text":"Cesar Ezra Ades Guilherme Caproni de Faria Jonathan Sutton","title":"Autores:"},{"location":"#link-do-repositorio","text":"","title":"Link do reposit\u00f3rio"},{"location":"P1/","text":"Instalando o FLutter Para come\u00e7ar a desenvolver o seu primeiro projeto Flutter, acesse esse link para baixar a aplica\u00e7\u00e3o. Voc\u00ea tamb\u00e9m precisar\u00e1 baixar o Android Studio . Agora que voc\u00ea tem tudo baixado, utilize o seguinte comando: flutter doctor Esse comando checa o ambiente e printa no terminal a situa\u00e7\u00e3o. Provavelmente voc\u00ea encontrar\u00e1 alguns problemas no terminal, mas \u00e9 normal, pode ficar tranquilo. Vamos configurar o que falta. Configurando o Android Studio Instalando Inicie o Android Studio, e baixe todas depend\u00eancias recomendadas na instala\u00e7\u00e3o. Elas ser\u00e3o necess\u00e1rias na hora de desenvolver o projeto. Em seguida, mais uma vez d\u00ea um flutter doctor e veja se est\u00e1 tudo ok. Caso n\u00e3o esteja, \u00e9 recomendado que se d\u00ea o comando flutter config --android-studio-dir <directory> para encontrar o diret\u00f3rio que o Android Studio foi instalado. Configurando o emulador Permita o VM acceleration de atuar na sua m\u00e1quina No terminal, acesse o Android Studio a partir do comando android-studio -> bin sh ./studio.sh . Feito isso, dentro da aplica\u00e7\u00e3o acesse o \u00edcone que diz AVD Manager , e logo em seguida Create virtual device . Escolha o dispositivo desejado e clique em Next . Escolha as imagens do sistema no Android Studio que voc\u00ea deseja emular (pode ser apenas uma). O recomendado \u00e9 uma imagem x86 . Verifique se todas as configura\u00e7\u00f5es est\u00e3o corretas e selecione Finish . Dentro do Menu, selecione Run no menu. Se tudo estiver certo, voc\u00ea ver\u00e1 um emulador do dispositivo escolhido na tela do seu computador! Concordando com os termos de licen\u00e7a Para poder utilizar o Flutter, \u00e9 preciso aceitar as licen\u00e7as do SDK. Ap\u00f3s todas as instala\u00e7\u00f5es feitas acima, d\u00ea o seguinte comando: flutter doctor --android-licenses O esperado \u00e9 que apare\u00e7a no terminal os termos de cada licen\u00e7a do Android Studio. Leia com aten\u00e7\u00e3o antes de aceit\u00e1-los! Com isso, d\u00ea (pela \u00faltima vez, espero) o comando flutter doctor . Se est\u00e1 tudo ok, parab\u00e9ns! Voc\u00ea terminou de configurar o Android Studio! Caso contr\u00e1rio, esse link pode te auxiliar . Configurando o VS Code Para come\u00e7ar, baixe o VS Code a partir do seguinte link . Instalando o plugin do Flutter Inicie o VS Code. Clique em View -> Command Palette . Digite \"install\" e selecione Extensions: Install Extensions . Digite \"Flutter\" no campo de pesquisa, selecione Flutter e clique em Install . Pronto, plugin instalado! Validando a instala\u00e7\u00e3o com o Flutter Doctor Clique mais uma vez em View -> Command Palette . Digite \"doctor\" e selecione Flutter: Run Flutter Doctor . Caso o output n\u00e3o detecte nenhum problema, incr\u00edvel! Est\u00e1 tudo pronto! Sei que essa primeira parte \u00e9 mais complicada mesmo, mas prometo que vai ficar mais interessante. A segunda parte do tutorial est\u00e1 dispon\u00edvel aqui","title":"Parte 1 - Setup"},{"location":"P1/#instalando-o-flutter","text":"Para come\u00e7ar a desenvolver o seu primeiro projeto Flutter, acesse esse link para baixar a aplica\u00e7\u00e3o. Voc\u00ea tamb\u00e9m precisar\u00e1 baixar o Android Studio . Agora que voc\u00ea tem tudo baixado, utilize o seguinte comando: flutter doctor Esse comando checa o ambiente e printa no terminal a situa\u00e7\u00e3o. Provavelmente voc\u00ea encontrar\u00e1 alguns problemas no terminal, mas \u00e9 normal, pode ficar tranquilo. Vamos configurar o que falta.","title":"Instalando o FLutter"},{"location":"P1/#configurando-o-android-studio","text":"","title":"Configurando o Android Studio"},{"location":"P1/#instalando","text":"Inicie o Android Studio, e baixe todas depend\u00eancias recomendadas na instala\u00e7\u00e3o. Elas ser\u00e3o necess\u00e1rias na hora de desenvolver o projeto. Em seguida, mais uma vez d\u00ea um flutter doctor e veja se est\u00e1 tudo ok. Caso n\u00e3o esteja, \u00e9 recomendado que se d\u00ea o comando flutter config --android-studio-dir <directory> para encontrar o diret\u00f3rio que o Android Studio foi instalado.","title":"Instalando"},{"location":"P1/#configurando-o-emulador","text":"Permita o VM acceleration de atuar na sua m\u00e1quina No terminal, acesse o Android Studio a partir do comando android-studio -> bin sh ./studio.sh . Feito isso, dentro da aplica\u00e7\u00e3o acesse o \u00edcone que diz AVD Manager , e logo em seguida Create virtual device . Escolha o dispositivo desejado e clique em Next . Escolha as imagens do sistema no Android Studio que voc\u00ea deseja emular (pode ser apenas uma). O recomendado \u00e9 uma imagem x86 . Verifique se todas as configura\u00e7\u00f5es est\u00e3o corretas e selecione Finish . Dentro do Menu, selecione Run no menu. Se tudo estiver certo, voc\u00ea ver\u00e1 um emulador do dispositivo escolhido na tela do seu computador!","title":"Configurando o emulador"},{"location":"P1/#concordando-com-os-termos-de-licenca","text":"Para poder utilizar o Flutter, \u00e9 preciso aceitar as licen\u00e7as do SDK. Ap\u00f3s todas as instala\u00e7\u00f5es feitas acima, d\u00ea o seguinte comando: flutter doctor --android-licenses O esperado \u00e9 que apare\u00e7a no terminal os termos de cada licen\u00e7a do Android Studio. Leia com aten\u00e7\u00e3o antes de aceit\u00e1-los! Com isso, d\u00ea (pela \u00faltima vez, espero) o comando flutter doctor . Se est\u00e1 tudo ok, parab\u00e9ns! Voc\u00ea terminou de configurar o Android Studio! Caso contr\u00e1rio, esse link pode te auxiliar .","title":"Concordando com os termos de licen\u00e7a"},{"location":"P1/#configurando-o-vs-code","text":"Para come\u00e7ar, baixe o VS Code a partir do seguinte link .","title":"Configurando o VS Code"},{"location":"P1/#instalando-o-plugin-do-flutter","text":"Inicie o VS Code. Clique em View -> Command Palette . Digite \"install\" e selecione Extensions: Install Extensions . Digite \"Flutter\" no campo de pesquisa, selecione Flutter e clique em Install . Pronto, plugin instalado!","title":"Instalando o plugin do Flutter"},{"location":"P1/#validando-a-instalacao-com-o-flutter-doctor","text":"Clique mais uma vez em View -> Command Palette . Digite \"doctor\" e selecione Flutter: Run Flutter Doctor . Caso o output n\u00e3o detecte nenhum problema, incr\u00edvel! Est\u00e1 tudo pronto! Sei que essa primeira parte \u00e9 mais complicada mesmo, mas prometo que vai ficar mais interessante. A segunda parte do tutorial est\u00e1 dispon\u00edvel aqui","title":"Validando a instala\u00e7\u00e3o com o Flutter Doctor"},{"location":"P2/","text":"Criando o nosso primeiro app Agora que voc\u00ea j\u00e1 tem todas instala\u00e7\u00f5es necess\u00e1rias, podemos come\u00e7ar a desenvolver o nosso primeiro projeto. Gerando o projeto no VS Code Por quest\u00f5es de praticidade, nesse projeto, iremos utilizar o edito de textos VS Code. Inicie o VS Code. Clique em View -> Command Palette . Digite \"Flutter\" e selecione Flutter: New Aplication Project . Selecione o diret\u00f3rio desejado para criar o projeto. Escolha o nome do projeto. Para esse tutorial, usaremos o nome nomes_startups . Se o arquivo main.dart abrir, parab\u00e9ns! O seu primeiro projeto em Flutter est\u00e1 criado. Rodando o app Procure o a barra de acesso do VS Code Selecione o dispositivo desejado. Caso n\u00e3o haja nenhum, selecione No devices . Rode o projeto na op\u00e7\u00e3o Start Debugging . Voc\u00ea deve ter visto uma tela parecida com essa no seu dispositivo. Vamos come\u00e7ar a programar, enfim! Primeiras mudan\u00e7as Localize o seguinte trecho do arquivo main.dart : const Text( 'You have pushed the button this many times:', ), Mude a palavra \"pushed\" para \"clicked\", da seguinte maneira: const Text( 'You have clicked the button this many times:', ), Em seguida, salve o arquivo. A mudan\u00e7a deve ter sido feita, sem nenhum tipo de reload. OBSERVA\u00c7\u00c3O O Flutter oferece um sistema de desenvolvimento r\u00e1pido chamado Stateful Hot Reload, que possui a habilidade de alterar um c\u00f3digo sem ter que reinici\u00e1-lo. Finalmente, come\u00e7ando a adicionar funcionalidades! Para come\u00e7ar a entender mais sobre a linguagem Flutter, substitua todo c\u00f3digo no arquivo main.dart pelo seguinte c\u00f3digo: // Copyright 2018 The Flutter team. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file. import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Welcome to Flutter', home: Scaffold( appBar: AppBar( title: const Text('Welcome to Flutter'), ), body: const Center( child: Text('Hello World'), ), ), ); } } Esse c\u00f3digo simplesmente printa um Hello World na tela inicial do app. Observa\u00e7\u00f5es sobre o c\u00f3digo acima: Esse c\u00f3digo gera um App Material . Para aplicativos de web e mobile, \u00e9 recomendado que os aplicativos tenham essa configura\u00e7\u00e3o, e geralmente s\u00e3o mais usados. Como voc\u00ea pode observar, o m\u00e9todo main() utiliza a flecha ( => ) como nota\u00e7\u00e3o. Para fun\u00e7\u00f5es ou m\u00e9todos de uma linha s\u00f3, utilize sempre essa flecha. A classe MyApp extende (herda) )um tal de StatelessWidget . Essa classe torna o pr\u00f3prio app em um widget. Ao programar utilizando Flutter, \u00e9 preciso saber que quase tudo \u00e9 um widget, inclusive o alinhamento, layout, etc. O widget Scaffold implementa a estrutura do layout visual da tela. Em apps Materiais, ele \u00e9 usado com o widget MaterialApp . Para cada nova tela que ser\u00e1 feita, o widget Scaffold \u00e9 acionado, enquanto o outro \u00e9 feito apenas uma vez. Adicionando pacotes externos Localize o arquivo pubsec.yaml e adicione a seguinte linha no seu arquivo: dependencies: flutter: sdk: flutter # The following adds the Cupertino Icons font to your application. # Use with the CupertinoIcons class for iOS style icons. cupertino_icons: ^1.0.2 Adicione em uma linha o seguinte c\u00f3digo: english_words: ^4.0.0 . Voc\u00ea deve estar se perguntando o que \u00e9 esse tal de english_words . Bom, \u00e9 um pacote que cont\u00e9m algumas palavras em ingl\u00eas, e outras fun\u00e7\u00f5es importantes. Esse pacote ser\u00e1 importante para o nosso projeto. Caso queira ver alguns outros pacotes, d\u00ea uma olhada nesse link . Se tudo correr conforme o esperado, voc\u00ea deve ver um output no seu c\u00f3digo contendo as seguintes linhas: [nomes_startups] flutter pub get Running \"flutter pub get\" in nomes_startups... 3.2s exit code 0 Isso significa que o pacote foi incluso no seu projeto! Adicione agora no arquivo main.dart , perto dos imports: import 'package:english_words/english_words.dart'; #linha a ser inclu\u00edda import 'package:flutter/material.dart'; Com os imports prontos, que tal adicionarmos essa funcionalidadade na nossa tela? Substitua os seguintes trechos de c\u00f3digo: class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); //linha adicionada para gerar palavras aleatorias! return MaterialApp( title: 'Welcome to Flutter', home: Scaffold( appBar: AppBar( title: const Text('Welcome to Flutter'), ), body: Center( //essas 2 linhas devem ser adicionadas no lugar da child: Text(wordPair.asPascalCase), //que printa Hello, World! ), ), ); A partir de agora, a tela do seu emulador deve conter algo parecido com isso: Cada vez que voc\u00ea salvar a p\u00e1gina main.dart , um novo nome deve aparecer na tela. Essa \u00e9 a funcionalidade do tal do english_words ! Lembre-se que para isso ser poss\u00edvel, o aplicativo precisa estar rodando, que nem foi descrito no come\u00e7o dessa etapa. Agora que temos a cria\u00e7\u00e3o do nosso aplicativo encaminhada, vamos para a 3a parte do tutorial , onde terminaremos o desenvolvimento.","title":"Parte 2 - Criando o nosso app"},{"location":"P2/#criando-o-nosso-primeiro-app","text":"Agora que voc\u00ea j\u00e1 tem todas instala\u00e7\u00f5es necess\u00e1rias, podemos come\u00e7ar a desenvolver o nosso primeiro projeto.","title":"Criando o nosso primeiro app"},{"location":"P2/#gerando-o-projeto-no-vs-code","text":"Por quest\u00f5es de praticidade, nesse projeto, iremos utilizar o edito de textos VS Code. Inicie o VS Code. Clique em View -> Command Palette . Digite \"Flutter\" e selecione Flutter: New Aplication Project . Selecione o diret\u00f3rio desejado para criar o projeto. Escolha o nome do projeto. Para esse tutorial, usaremos o nome nomes_startups . Se o arquivo main.dart abrir, parab\u00e9ns! O seu primeiro projeto em Flutter est\u00e1 criado.","title":"Gerando o projeto no VS Code"},{"location":"P2/#rodando-o-app","text":"Procure o a barra de acesso do VS Code Selecione o dispositivo desejado. Caso n\u00e3o haja nenhum, selecione No devices . Rode o projeto na op\u00e7\u00e3o Start Debugging . Voc\u00ea deve ter visto uma tela parecida com essa no seu dispositivo. Vamos come\u00e7ar a programar, enfim!","title":"Rodando o app"},{"location":"P2/#primeiras-mudancas","text":"Localize o seguinte trecho do arquivo main.dart : const Text( 'You have pushed the button this many times:', ), Mude a palavra \"pushed\" para \"clicked\", da seguinte maneira: const Text( 'You have clicked the button this many times:', ), Em seguida, salve o arquivo. A mudan\u00e7a deve ter sido feita, sem nenhum tipo de reload. OBSERVA\u00c7\u00c3O O Flutter oferece um sistema de desenvolvimento r\u00e1pido chamado Stateful Hot Reload, que possui a habilidade de alterar um c\u00f3digo sem ter que reinici\u00e1-lo.","title":"Primeiras mudan\u00e7as"},{"location":"P2/#finalmente-comecando-a-adicionar-funcionalidades","text":"Para come\u00e7ar a entender mais sobre a linguagem Flutter, substitua todo c\u00f3digo no arquivo main.dart pelo seguinte c\u00f3digo: // Copyright 2018 The Flutter team. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file. import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Welcome to Flutter', home: Scaffold( appBar: AppBar( title: const Text('Welcome to Flutter'), ), body: const Center( child: Text('Hello World'), ), ), ); } } Esse c\u00f3digo simplesmente printa um Hello World na tela inicial do app.","title":"Finalmente, come\u00e7ando a adicionar funcionalidades!"},{"location":"P2/#observacoes-sobre-o-codigo-acima","text":"Esse c\u00f3digo gera um App Material . Para aplicativos de web e mobile, \u00e9 recomendado que os aplicativos tenham essa configura\u00e7\u00e3o, e geralmente s\u00e3o mais usados. Como voc\u00ea pode observar, o m\u00e9todo main() utiliza a flecha ( => ) como nota\u00e7\u00e3o. Para fun\u00e7\u00f5es ou m\u00e9todos de uma linha s\u00f3, utilize sempre essa flecha. A classe MyApp extende (herda) )um tal de StatelessWidget . Essa classe torna o pr\u00f3prio app em um widget. Ao programar utilizando Flutter, \u00e9 preciso saber que quase tudo \u00e9 um widget, inclusive o alinhamento, layout, etc. O widget Scaffold implementa a estrutura do layout visual da tela. Em apps Materiais, ele \u00e9 usado com o widget MaterialApp . Para cada nova tela que ser\u00e1 feita, o widget Scaffold \u00e9 acionado, enquanto o outro \u00e9 feito apenas uma vez.","title":"Observa\u00e7\u00f5es sobre o c\u00f3digo acima:"},{"location":"P2/#adicionando-pacotes-externos","text":"Localize o arquivo pubsec.yaml e adicione a seguinte linha no seu arquivo: dependencies: flutter: sdk: flutter # The following adds the Cupertino Icons font to your application. # Use with the CupertinoIcons class for iOS style icons. cupertino_icons: ^1.0.2 Adicione em uma linha o seguinte c\u00f3digo: english_words: ^4.0.0 . Voc\u00ea deve estar se perguntando o que \u00e9 esse tal de english_words . Bom, \u00e9 um pacote que cont\u00e9m algumas palavras em ingl\u00eas, e outras fun\u00e7\u00f5es importantes. Esse pacote ser\u00e1 importante para o nosso projeto. Caso queira ver alguns outros pacotes, d\u00ea uma olhada nesse link . Se tudo correr conforme o esperado, voc\u00ea deve ver um output no seu c\u00f3digo contendo as seguintes linhas: [nomes_startups] flutter pub get Running \"flutter pub get\" in nomes_startups... 3.2s exit code 0 Isso significa que o pacote foi incluso no seu projeto! Adicione agora no arquivo main.dart , perto dos imports: import 'package:english_words/english_words.dart'; #linha a ser inclu\u00edda import 'package:flutter/material.dart'; Com os imports prontos, que tal adicionarmos essa funcionalidadade na nossa tela? Substitua os seguintes trechos de c\u00f3digo: class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); //linha adicionada para gerar palavras aleatorias! return MaterialApp( title: 'Welcome to Flutter', home: Scaffold( appBar: AppBar( title: const Text('Welcome to Flutter'), ), body: Center( //essas 2 linhas devem ser adicionadas no lugar da child: Text(wordPair.asPascalCase), //que printa Hello, World! ), ), ); A partir de agora, a tela do seu emulador deve conter algo parecido com isso: Cada vez que voc\u00ea salvar a p\u00e1gina main.dart , um novo nome deve aparecer na tela. Essa \u00e9 a funcionalidade do tal do english_words ! Lembre-se que para isso ser poss\u00edvel, o aplicativo precisa estar rodando, que nem foi descrito no come\u00e7o dessa etapa. Agora que temos a cria\u00e7\u00e3o do nosso aplicativo encaminhada, vamos para a 3a parte do tutorial , onde terminaremos o desenvolvimento.","title":"Adicionando pacotes externos"},{"location":"P3/","text":"Finalizando a p\u00e1gina Vamos finalizar o nosso aplicativo. Com a base que temos, basta disponibilizarmos mais alguns nomes na tela para completar a miss\u00e3o. Adicionando Widgets H\u00e1 2 maneiras de um widget ser definido: Widgets com estados: Propriedades poder\u00e3o ser alteradas ao longo do desenvolvimento do projeto, enquanto essa widget existir. Widgets sem estados: Nenhuma propriedade poder\u00e1 ser alterada, ou seja, s\u00e3o valores imut\u00e1veis. Tendo isso como base, vamos implementar um widget com estados ( Stateful Widget ), RandomWords , que cria a classe _RandomWordsState . Al\u00e9m disso, a classe RandomWords ser\u00e1 usada como filha (heran\u00e7a) na classe MyApp . Para come\u00e7ar o nosso widget, abra novamente o arquivo main.dart , pule 2 linhas e digite a palavra stful . O VS Code ir\u00e1 te sugerir criar uma Stateful Widget , e ent\u00e3o selecione a op\u00e7\u00e3o! Voc\u00ea ir\u00e1 se deparar com o seguinte c\u00f3digo: class extends StatefulWidget { const ({ Key? key }) : super(key: key); @override _State createState() => _State(); } class _State extends State<> { @override Widget build(BuildContext context) { return Container( ); } } Perceba que o editor j\u00e1 deixou selecionado na frente da palavra class . Isso acontece justamente para voc\u00ea definir o nome da sua classe, que no nosso caso se chamar\u00e1 RandomWords (conforme combinado). Perceba que a classe _RandomWordsState tamb\u00e9m foi criada ap\u00f3s voc\u00ea colocar o nome! O underscore \u00e9 imposto por padr\u00e3o pelo Dart. Considere por esse sinal em classes do tipo state como uma boa pr\u00e1tica. Suas classes devem estar assim: class RandomWords extends StatefulWidget { @override _RandomWordsState createState() => _RandomWordsState(); } class _RandomWordsState extends State<RandomWords> { @override Widget build(BuildContext context) { return Container(); } } Altere o m\u00e9todo build() com as seguintes linhas: class _RandomWordsState extends State<RandomWords> { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); //Sorteando um n return Text(wordPair.asPascalCase); } } Para finalizar, no c\u00f3digo inicial, altere o child . De Text(wordPair.asPascalCase) para RandomWords() . Lembrando que essa configura\u00e7\u00e3o que foi trocada j\u00e1 foi definida na nossa classe _RandomWordsState . O resultado na tela deve ser o mesmo de antes. Vamos, enfim, adicionar as mudan\u00e7as. Criando uma barra de deslocamento No \u00faltimo passo da etapa 3, vamos expandir a classe _RandomWordsState para ela disponibilizar v\u00e1rios nomes, ao inv\u00e9s de apenas um. Comece as mudan\u00e7as criando uma lista de sugest\u00f5es para salvar os pares de nomes gerados. Vamos tamb\u00e9m adicionar uma vari\u00e1vel para aumentar a letra que aparece na tela. class _RandomWordsState extends State<RandomWords> { final _suggestions = <WordPair>[]; final _biggerFont = const TextStyle(fontSize: 18.0); // \u00b7\u00b7\u00b7 } O pr\u00f3ximo passo ser\u00e1 adicionar outra fun\u00e7\u00e3o! Vamos criar a BuildSugestions() , que criar\u00e1 a nossa ListView() (fun\u00e7\u00e3o que exibe as palavras). A classe ListView() possui um construtor, ItemBuilder() , que entra como uma fun\u00e7\u00e3o an\u00f4nima. Essa fun\u00e7\u00e3o recebe 2 par\u00e2metros: BuildContext : passa o contexto para o construtor Iterador i : come\u00e7a no 0 e vai aumentando o valor 2 vezes a cada vez que a fun\u00e7\u00e3o \u00e9 chamada Vamos por a m\u00e3o na massa! Adicione o m\u00e9todo _buildSugestions() na nossa classe _RandomWordsState : Widget _buildSuggestions() { return ListView.builder( padding: const EdgeInsets.all(16.0), itemBuilder: /*1*/ (context, i) { if (i.isOdd) return const Divider(); /*2*/ final index = i ~/ 2; /*3*/ if (index >= _suggestions.length) { _suggestions.addAll(generateWordPairs().take(10)); /*4*/ } return _buildRow(_suggestions[index]); }); } Observa\u00e7\u00f5es sobre o c\u00f3digo acima / 1 /: O itemBuilder \u00e9 chamado a cada combina\u00e7\u00e3o de palavras, e deixa cada sugest\u00e3o na coluna ListTitle . Para colunas pares , a fun\u00e7\u00e3o adiciona uma coluna ListTitle por combina\u00e7\u00e3o. Para colunas \u00edmpares , a fun\u00e7\u00e3o adiciona um uma widget divisora para separas as entradas visualmente. / 2 /: Adiciona um widget divisor de um pixel de altura em ListView . / 3 /: A opera\u00e7\u00e3o i ~/ 2 divide o i por 2, e retorno um resultado inteiro . Esse trecho, ent\u00e3o, calcula o n\u00famero de combina\u00e7\u00f5es na ListView , menos as widgets divisoras. / 4 /: Caso voc\u00ea use todas palavras generadas, ele gera mais 10 novas e adiciona na lista de sugest\u00f5es. Vamos adicionar agora o m\u00e9todo para criar as linhas! O m\u00e9todo _buildRow ! Widget _buildRow(WordPair pair) { return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), ); } Mais uma vez na classe _RandomWordsState , vamos atualizar o m\u00e9todo _build() para incorporar a lista de sugest\u00f5es! Ao inv\u00e9s de apenas chamar a biblioteca, que nem estavamos fazendo at\u00e9 agora, a lista disponibilizar\u00e1 mais de um nome na tela. Substitua o m\u00e9todo body: @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text('Nomes para startups'), ), body: _buildSuggestions(), ); } Para finalizar, vamos entrar na classe principal do app ( MyApp() ) para aplicar nossas mudan\u00e7as. class MyApp extends StatelessWidget { // #docregion build @override Widget build(BuildContext context) { return MaterialApp( title: 'Startup Name Generator', home: RandomWords(), //Mudamos o home para chamar a classe RandomWords(), que j\u00e1 contem dados como titulo, etc ); } Feito todos passos, o seu app deve ter uma cara assim: Pronto! Nosso app est\u00e1 pronto! No pr\u00f3ximo passo, vamos tornar essa p\u00e1gina interativa. Como? Acesse esse link .","title":"Parte 3 - Finalizando a p\u00e1gina"},{"location":"P3/#finalizando-a-pagina","text":"Vamos finalizar o nosso aplicativo. Com a base que temos, basta disponibilizarmos mais alguns nomes na tela para completar a miss\u00e3o.","title":"Finalizando a p\u00e1gina"},{"location":"P3/#adicionando-widgets","text":"H\u00e1 2 maneiras de um widget ser definido: Widgets com estados: Propriedades poder\u00e3o ser alteradas ao longo do desenvolvimento do projeto, enquanto essa widget existir. Widgets sem estados: Nenhuma propriedade poder\u00e1 ser alterada, ou seja, s\u00e3o valores imut\u00e1veis. Tendo isso como base, vamos implementar um widget com estados ( Stateful Widget ), RandomWords , que cria a classe _RandomWordsState . Al\u00e9m disso, a classe RandomWords ser\u00e1 usada como filha (heran\u00e7a) na classe MyApp . Para come\u00e7ar o nosso widget, abra novamente o arquivo main.dart , pule 2 linhas e digite a palavra stful . O VS Code ir\u00e1 te sugerir criar uma Stateful Widget , e ent\u00e3o selecione a op\u00e7\u00e3o! Voc\u00ea ir\u00e1 se deparar com o seguinte c\u00f3digo: class extends StatefulWidget { const ({ Key? key }) : super(key: key); @override _State createState() => _State(); } class _State extends State<> { @override Widget build(BuildContext context) { return Container( ); } } Perceba que o editor j\u00e1 deixou selecionado na frente da palavra class . Isso acontece justamente para voc\u00ea definir o nome da sua classe, que no nosso caso se chamar\u00e1 RandomWords (conforme combinado). Perceba que a classe _RandomWordsState tamb\u00e9m foi criada ap\u00f3s voc\u00ea colocar o nome! O underscore \u00e9 imposto por padr\u00e3o pelo Dart. Considere por esse sinal em classes do tipo state como uma boa pr\u00e1tica. Suas classes devem estar assim: class RandomWords extends StatefulWidget { @override _RandomWordsState createState() => _RandomWordsState(); } class _RandomWordsState extends State<RandomWords> { @override Widget build(BuildContext context) { return Container(); } } Altere o m\u00e9todo build() com as seguintes linhas: class _RandomWordsState extends State<RandomWords> { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); //Sorteando um n return Text(wordPair.asPascalCase); } } Para finalizar, no c\u00f3digo inicial, altere o child . De Text(wordPair.asPascalCase) para RandomWords() . Lembrando que essa configura\u00e7\u00e3o que foi trocada j\u00e1 foi definida na nossa classe _RandomWordsState . O resultado na tela deve ser o mesmo de antes. Vamos, enfim, adicionar as mudan\u00e7as.","title":"Adicionando Widgets"},{"location":"P3/#criando-uma-barra-de-deslocamento","text":"No \u00faltimo passo da etapa 3, vamos expandir a classe _RandomWordsState para ela disponibilizar v\u00e1rios nomes, ao inv\u00e9s de apenas um. Comece as mudan\u00e7as criando uma lista de sugest\u00f5es para salvar os pares de nomes gerados. Vamos tamb\u00e9m adicionar uma vari\u00e1vel para aumentar a letra que aparece na tela. class _RandomWordsState extends State<RandomWords> { final _suggestions = <WordPair>[]; final _biggerFont = const TextStyle(fontSize: 18.0); // \u00b7\u00b7\u00b7 } O pr\u00f3ximo passo ser\u00e1 adicionar outra fun\u00e7\u00e3o! Vamos criar a BuildSugestions() , que criar\u00e1 a nossa ListView() (fun\u00e7\u00e3o que exibe as palavras). A classe ListView() possui um construtor, ItemBuilder() , que entra como uma fun\u00e7\u00e3o an\u00f4nima. Essa fun\u00e7\u00e3o recebe 2 par\u00e2metros: BuildContext : passa o contexto para o construtor Iterador i : come\u00e7a no 0 e vai aumentando o valor 2 vezes a cada vez que a fun\u00e7\u00e3o \u00e9 chamada Vamos por a m\u00e3o na massa! Adicione o m\u00e9todo _buildSugestions() na nossa classe _RandomWordsState : Widget _buildSuggestions() { return ListView.builder( padding: const EdgeInsets.all(16.0), itemBuilder: /*1*/ (context, i) { if (i.isOdd) return const Divider(); /*2*/ final index = i ~/ 2; /*3*/ if (index >= _suggestions.length) { _suggestions.addAll(generateWordPairs().take(10)); /*4*/ } return _buildRow(_suggestions[index]); }); }","title":"Criando uma barra de deslocamento"},{"location":"P3/#observacoes-sobre-o-codigo-acima","text":"/ 1 /: O itemBuilder \u00e9 chamado a cada combina\u00e7\u00e3o de palavras, e deixa cada sugest\u00e3o na coluna ListTitle . Para colunas pares , a fun\u00e7\u00e3o adiciona uma coluna ListTitle por combina\u00e7\u00e3o. Para colunas \u00edmpares , a fun\u00e7\u00e3o adiciona um uma widget divisora para separas as entradas visualmente. / 2 /: Adiciona um widget divisor de um pixel de altura em ListView . / 3 /: A opera\u00e7\u00e3o i ~/ 2 divide o i por 2, e retorno um resultado inteiro . Esse trecho, ent\u00e3o, calcula o n\u00famero de combina\u00e7\u00f5es na ListView , menos as widgets divisoras. / 4 /: Caso voc\u00ea use todas palavras generadas, ele gera mais 10 novas e adiciona na lista de sugest\u00f5es. Vamos adicionar agora o m\u00e9todo para criar as linhas! O m\u00e9todo _buildRow ! Widget _buildRow(WordPair pair) { return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), ); } Mais uma vez na classe _RandomWordsState , vamos atualizar o m\u00e9todo _build() para incorporar a lista de sugest\u00f5es! Ao inv\u00e9s de apenas chamar a biblioteca, que nem estavamos fazendo at\u00e9 agora, a lista disponibilizar\u00e1 mais de um nome na tela. Substitua o m\u00e9todo body: @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text('Nomes para startups'), ), body: _buildSuggestions(), ); } Para finalizar, vamos entrar na classe principal do app ( MyApp() ) para aplicar nossas mudan\u00e7as. class MyApp extends StatelessWidget { // #docregion build @override Widget build(BuildContext context) { return MaterialApp( title: 'Startup Name Generator', home: RandomWords(), //Mudamos o home para chamar a classe RandomWords(), que j\u00e1 contem dados como titulo, etc ); } Feito todos passos, o seu app deve ter uma cara assim: Pronto! Nosso app est\u00e1 pronto! No pr\u00f3ximo passo, vamos tornar essa p\u00e1gina interativa. Como? Acesse esse link .","title":"Observa\u00e7\u00f5es sobre o c\u00f3digo acima"},{"location":"P4/","text":"Tornando a nossa p\u00e1gina interativa","title":"Parte 4 - Tornando a p\u00e1gina interativa"},{"location":"P4/#tornando-a-nossa-pagina-interativa","text":"","title":"Tornando a nossa p\u00e1gina interativa"}]}